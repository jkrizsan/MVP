// <auto-generated />
using System;
using MVP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MVPContext))]
    [Migration("20221111120607_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MVP.Data.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a5c9bab-39a5-4a3d-b150-d620fb817ba1"),
                            Name = "Austria",
                            Tax = 20.0
                        },
                        new
                        {
                            Id = new Guid("d07a161a-6aff-4224-bc44-a510022826a3"),
                            Name = "Belgium",
                            Tax = 21.0
                        },
                        new
                        {
                            Id = new Guid("f24549c7-eca7-442e-94ed-3a4c559ba9c4"),
                            Name = "Bulgaria",
                            Tax = 20.0
                        },
                        new
                        {
                            Id = new Guid("842c637a-1b8d-4878-b1c3-36149e71c1bd"),
                            Name = "Cyprus",
                            Tax = 19.0
                        },
                        new
                        {
                            Id = new Guid("527ec3e2-ae69-4aa2-9a62-6bddb210546d"),
                            Name = "Czech Republic",
                            Tax = 21.0
                        },
                        new
                        {
                            Id = new Guid("34babcb6-4673-479a-a3dd-fdf1e4a33e3d"),
                            Name = "Croatia",
                            Tax = 25.0
                        },
                        new
                        {
                            Id = new Guid("2a74de0a-ebd0-4759-9081-bb5ccec4dec0"),
                            Name = "Denmark",
                            Tax = 25.0
                        },
                        new
                        {
                            Id = new Guid("9133baf7-9a1f-4cec-8f9a-201b3ec42762"),
                            Name = "Estonia",
                            Tax = 20.0
                        },
                        new
                        {
                            Id = new Guid("1ebf6a56-a890-41df-8ae2-f423978368b6"),
                            Name = "Finland",
                            Tax = 24.0
                        },
                        new
                        {
                            Id = new Guid("4759f1ba-8659-4dc0-a0d0-000931af2b83"),
                            Name = "France",
                            Tax = 20.0
                        },
                        new
                        {
                            Id = new Guid("c0439c1d-6645-4c8f-a450-9130571fde78"),
                            Name = "Germany",
                            Tax = 19.0
                        },
                        new
                        {
                            Id = new Guid("0391f90d-88ea-487c-bd3d-4a4f436a842a"),
                            Name = "Greece",
                            Tax = 24.0
                        },
                        new
                        {
                            Id = new Guid("5a5e3359-8320-48f5-89f3-e064f8cad8ba"),
                            Name = "Hungary",
                            Tax = 27.0
                        },
                        new
                        {
                            Id = new Guid("8e9998ac-17f9-4f05-a722-6e52cc48d89a"),
                            Name = "Ireland",
                            Tax = 23.0
                        },
                        new
                        {
                            Id = new Guid("7d456c60-5b09-4832-8e7c-111628c4780c"),
                            Name = "Italy",
                            Tax = 22.0
                        },
                        new
                        {
                            Id = new Guid("1bad24f1-4f24-44cf-b5bc-473368b8c52b"),
                            Name = "Latvia",
                            Tax = 21.0
                        },
                        new
                        {
                            Id = new Guid("d9a9700f-1dff-45d8-a4a9-ff55cb3bc6b8"),
                            Name = "Lithuania",
                            Tax = 21.0
                        },
                        new
                        {
                            Id = new Guid("c7579721-8300-4820-95b8-97296bbfa353"),
                            Name = "Luxembourg",
                            Tax = 17.0
                        },
                        new
                        {
                            Id = new Guid("3221eefa-3ee5-488b-85cd-cf1198c90180"),
                            Name = "Malta",
                            Tax = 18.0
                        },
                        new
                        {
                            Id = new Guid("e228c339-7188-415d-8e7c-f437f3c112ab"),
                            Name = "Netherlands",
                            Tax = 21.0
                        },
                        new
                        {
                            Id = new Guid("f77ba6b8-4910-4587-b50e-cb79870dcfb8"),
                            Name = "Poland",
                            Tax = 23.0
                        },
                        new
                        {
                            Id = new Guid("c2636d14-bc15-4245-9305-26c656e20583"),
                            Name = "Portugal",
                            Tax = 23.0
                        },
                        new
                        {
                            Id = new Guid("f403e41c-2d82-40bb-81da-e21f35b01a66"),
                            Name = "Romania",
                            Tax = 19.0
                        },
                        new
                        {
                            Id = new Guid("eed6252f-7f28-4f1c-9065-8bb186b4a6fd"),
                            Name = "Slovakia",
                            Tax = 20.0
                        },
                        new
                        {
                            Id = new Guid("f06a5a98-5655-470d-ada8-6effef1c0c20"),
                            Name = "Slovenia",
                            Tax = 22.0
                        },
                        new
                        {
                            Id = new Guid("166b99cc-f4d9-491c-bea2-0e48ac6d5218"),
                            Name = "Spain",
                            Tax = 21.0
                        },
                        new
                        {
                            Id = new Guid("7e3838b1-7b4a-473e-ad8d-f4db50da3440"),
                            Name = "Sweden",
                            Tax = 25.0
                        },
                        new
                        {
                            Id = new Guid("5baaf4c0-7032-4db8-9d22-81092028294c"),
                            Name = "United Kingdom",
                            Tax = 20.0
                        });
                });

            modelBuilder.Entity("MVP.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5897b1a9-dcff-4399-b478-2ea8e1e35e98"),
                            Name = "Apple",
                            Price = 100.0
                        },
                        new
                        {
                            Id = new Guid("f0f745f2-d0a9-4aef-811f-fb34e88b7ba2"),
                            Name = "Banana",
                            Price = 199.0
                        },
                        new
                        {
                            Id = new Guid("b5ef8097-8a0a-4fa0-9dd3-24183e17327f"),
                            Name = "Car",
                            Price = 9990.5
                        },
                        new
                        {
                            Id = new Guid("ded29ad9-3cfa-4d62-9ac5-fa47a7bfdb9c"),
                            Name = "Pizza",
                            Price = 30.0
                        },
                        new
                        {
                            Id = new Guid("3e2bd399-7bef-407f-a32e-8fba1fe85c2e"),
                            Name = "Eggs",
                            Price = 24.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Data.Authentication.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
